<launch>
    <arg name="init_x_" />
    <arg name="init_y_" />
    <arg name="init_z_" />
    <arg name="odom_topic" />
    <arg name="drone_id" />
    <arg name="use_gpu" />
    <arg name="sensor_type" />

    <!-- 接受cmd 发出odom -->
    <node pkg="fake_drone" name="drone_$(arg drone_id)_poscmd_2_odom" type="poscmd_2_odom" output="screen">
        <param name="init_x" value="$(arg init_x_)"/>
        <param name="init_y" value="$(arg init_y_)"/>
        <param name="init_z" value="$(arg init_z_)"/>
        <remap from="~command" to="drone_$(arg drone_id)/planning/pos_cmd"/>
        <remap from="~odometry" to="drone_$(arg drone_id)/$(arg odom_topic)"/>
    </node>

    <![CDATA[ 
    <node pkg="so3_quadrotor_simulator" type="quadrotor_simulator_so3"
        name="quadrotor_simulator_so3" output="screen">
        <param name="rate/odom" value="200.0" />
        <param name="simulator/init_state_x" value="$(arg init_x_)" />
        <param name="simulator/init_state_y" value="$(arg init_y_)" />
        <param name="simulator/init_state_z" value="$(arg init_z_)" />

        <remap from="~odom" to="drone_$(arg drone_id)/$(arg odom_topic)" />
        <remap from="~cmd" to="so3_cmd" />
        <remap from="~force_disturbance" to="force_disturbance" />
        <remap from="~moment_disturbance" to="moment_disturbance" />
    </node>

    <!-- Quadrotor Controller -->
    <node pkg="nodelet" type="nodelet" args="standalone so3_control/SO3ControlNodelet"
        name="so3_control" required="true" output="screen">
        <remap from="~odom" to="drone_$(arg drone_id)/$(arg odom_topic)" />
        <remap from="~position_cmd" to="drone_$(arg drone_id)/planning/pos_cmd" />
        <remap from="~motors" to="motors" />
        <remap from="~corrections" to="corrections" />
        <remap from="~so3_cmd" to="so3_cmd" />
        <remap from="~imu" to="sim/imu" />

        <rosparam file="$(find so3_control)/config/gains_hummingbird.yaml" />
        <rosparam file="$(find so3_control)/config/corrections_hummingbird.yaml" />
        <param name="mass" value="0.98" />
        <param name="use_angle_corrections " value="false" />
        <param name="use_external_yaw " value="false" />
        <param name="gains/rot/z" value="1.0" />
        <param name="gains/ang/z" value="0.1" />
    </node>
    ]]>
    <!-- 接受odom 建立无人机模型 -->
    <node pkg="odom_visualization" name="drone_$(arg drone_id)_odom_visualization"
        type="odom_visualization" output="screen">
        <remap from="~odom" to="drone_$(arg drone_id)/$(arg odom_topic)" />
        <param name="color/a" value="1.0" />
        <param name="color/r" value="0.0" />
        <param name="color/g" value="0.0" />
        <param name="color/b" value="0.0" />
        <param name="covariance_scale" value="100.0" />
        <param name="robot_scale" value="1.0" />
        <param name="tf45" value="false" />
        <param name="drone_id" value="$(arg drone_id)" />
    </node>


    <!-- sensor simulator -->
    <group if="$(arg use_gpu)">
        <group if="$(eval sensor_type == 'depth')">
            <node pkg="depth_sensor_simulator" type="pcl_render_node"
                name="drone_$(arg drone_id)_depth_render_node" output="screen">
                <rosparam command="load" file="$(find depth_sensor_simulator)/params/camera.yaml" />
                <remap from="~static_map" to="/static_env/global_cloud" />
                <remap from="~dynamic_map" to="/dynamic_env/global_cloud" />
                <remap from="~odometry" to="drone_$(arg drone_id)/odometry" />
                <!-- output -->
                <remap from="~rendered_pcl" to="drone_$(arg drone_id)/rendered_pcl" />
                <param name="sensing_horizon" value="5.0" />
                <param name="sensing_rate" value="30.0" />
                <param name="estimation_rate" value="30.0" />
            </node>

        </group>

        <group if="$(eval sensor_type == 'mid360')">
            <node pkg="lidar_sensor_simulator" type="test_render_node"
                name="drone_$(arg drone_id)_lidar_render_node" output="screen">
                <!-- <node pkg="lidar_sensor_simulator" type="test_render_node" name="drone_$(arg
                drone_id)_lidar_render_node"> -->
                <remap from="~odometry" to="/drone_$(arg drone_id)/odometry" />
                <remap from="~static_map" to="/static_env/global_cloud" />
                <remap from="~dynamic_map" to="/dynamic_env/global_cloud" />
                <!-- output -->
                <remap from="~cloud" to="drone_$(arg drone_id)/rendered_pcl" />
                <param name="is_360lidar" value="1" />
                <param name="sensing_horizon" value="15.0" />
                <param name="sensing_rate" value="10.0" />
                <param name="estimation_rate" value="10.0" />
                <param name="polar_resolution" value="0.2" />
                <param name="yaw_fov" value="360.0" />
                <param name="vertical_fov" value="90.0" />
                <param name="min_raylength" value="1.0" />
                <param name="livox_linestep" value="1.4" />
                <param name="curvature_limit" value="100.0" />
                <param name="hash_cubesize" value="5.0" />
                <param name="use_avia_pattern" value="0" />
                <param name="use_vlp32_pattern" value="0" />
                <param name="use_minicf_pattern" value="1" />
                <param name="downsample_res" value="0.1" />
            </node>
        </group>
    </group>


</launch>